[gcode_macro _Probe_Variables]
variable_probe_attached:            False
variable_probe_state:               False
gcode:

[gcode_macro _exit_point]
gcode:
    M400
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    RESTORE_GCODE_STATE NAME={'pre_' ~ params.FUNCTION} MOVE={params.MOVE|default(0)} MOVE_SPEED={params.SPEED|default(printer["gcode_macro _User_Variables"].travel_speed)}

[gcode_macro _entry_point]
gcode:
    M400
    SAVE_GCODE_STATE NAME={'pre_' ~ params.FUNCTION}
    G90 # absolute
    SET_VELOCITY_LIMIT ACCEL={printer["gcode_macro _User_Variables"].move_accel|default(1000)}

[gcode_macro Attach_Probe]
description: Attaches Klicky Probe
gcode:
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
    # Get Docking location
    {% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
    {% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
    {% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
    {% set attach_detach_move_x = printer["gcode_macro _User_Variables"].attach_detach_move_x|default(0) %}
    # Safe Z for travel
	{% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
    # Set feedrates
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}

    _entry_point function=Attach_Probe

    # If x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    # If probe not attached
    {% elif not probe_attached %}
        { action_respond_info("Attaching Probe") }

        {% if not 'z' in printer.toolhead.homed_axes %}
            { action_respond_info("Resetting Z position to zero") }
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # Prior to saving actual position, check if its necessary to move to a safe Z
        # that has enought overhead for the attached probe
        {% if printer.toolhead.position.z < safe_z %}
            { action_respond_info("moving to a safe Z distance") }
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        {% if not 'z' in printer.toolhead.homed_axes %}
            { action_respond_info("Resetting Z position to zero") }
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        {% if printer.toolhead.position.z < safe_z %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        _entry_point function=Attach_Probe_intern
            # Probe entry location
            G0 X{docklocation_x|int} Y{docklocation_y|int - attachmove_y|int} F{travel_feedrate}

            G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}

            # Probe Attach
            G0 X{docklocation_x|int + attach_detach_move_x|int} Y{docklocation_y|int} F{release_feedrate}

            G0 Z{safe_z} F{z_drop_feedrate}

            _CheckProbe action=attach
	    _exit_point function=Attach_Probe_intern
    {% else %}
        { action_respond_info("Probe already attached!") }

        # Probe attached, do nothing
        _CheckProbe action=query
    {% endif %}

    _exit_point function=Attach_Probe

[gcode_macro Dock_Probe]
description: Docks Klicky Probe
gcode:
    # Get probe attach status
    {% set probe_attached = printer["gcode_macro _Probe_Variables"].probe_attached %}
    # Get Docking location
    {% set dockmove_z = printer["gcode_macro _User_Variables"].dockmove_z|default(0) %}
    {% set docklocation_x = printer["gcode_macro _User_Variables"].docklocation_x %}
    {% set docklocation_y = printer["gcode_macro _User_Variables"].docklocation_y %}
    {% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
    {% set detachmove_x = printer["gcode_macro _User_Variables"].detachmove_x|default(0) %}
    {% set detachmove_y = printer["gcode_macro _User_Variables"].detachmove_y|default(0) %}
    # Safe Z for travel
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    # Set feedrates
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set dock_feedrate = printer["gcode_macro _User_Variables"].dock_speed * 60 %}
    {% set release_feedrate = printer["gcode_macro _User_Variables"].release_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}

    # If axis aren't homed, fail
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    _entry_point function=Dock_Probe

    # If probe not attached
    {% if probe_attached %}
        { action_respond_info("Docking Probe") }

        {% if printer.toolhead.position.z < safe_z %}
            G0 Z{safe_z} F{z_drop_feedrate}
        {% endif %}

        # Probe entry location
        G0 X{docklocation_x|int} Y{docklocation_y|int} F{travel_feedrate}

        # Drop Probe to Probe location
        G0 X{docklocation_x} Y{docklocation_y} F{dock_feedrate}

        # Probe decoupling
        G0 Y{docklocation_y|int + detachmove_y|int} F{release_feedrate}
        G0 X{docklocation_x|int + detachmove_x|int} F{release_feedrate}

        G0 Z{safe_z} F{z_drop_feedrate}

        G4 P1000
        _CheckProbe action=dock

    {% else %}
        { action_respond_info("Probe already docked") }

        # Probe docked, do nothing
        _CheckProbe action=query

    {% endif %}

    _exit_point function=Dock_Probe

#################
# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
description:Calibrate the probes z_offset with klicky automount
gcode:
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
    {% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
    {% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    # Protect against PROBE CALIBRATE performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < probe_offset_x %}
      { action_raise_error("Must perform PROBE_CALIBRATE with the probe above the BED!") }
    {% endif%}

    _CheckProbe action=query
    G90
    Attach_Probe back=1

    _PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    M118 moving the toolhead 20 mm from the bed
    TESTZ Z=20
    M118 remove manually the probe and continue calibration

################
# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with klicky automount
gcode:
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed %}
    {% set max_x = printer["gcode_macro _User_Variables"].max_bed_x %}
    {% set max_y = printer["gcode_macro _User_Variables"].max_bed_y %}
    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    _entry_point function=PROBE_ACCURACY

    # Protect against PROBE_ACCURACY performed from outside the bed
    {% if printer['gcode_move'].position.y > (max_y - probe_offset_y)
          or printer['gcode_move'].position.y < probe_offset_y
          or printer['gcode_move'].position.x > (max_x - probe_offset_x)
          or printer['gcode_move'].position.x < probe_offset_x %}
      { action_raise_error("Must perform PROBE_ACCURACY with the probe above the BED!") }
    {% endif%}

    _CheckProbe action=query
    Attach_Probe back=1

    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}

    Dock_Probe back=1										   

    _exit_point function=PROBE_ACCURACY move=1

[force_move]
enable_force_move: True

[homing_override]
axes: xyz
gcode:
    _User_Variables
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z %}
    {% set attachmove_y = printer["gcode_macro _User_Variables"].attachmove_y|default(0) %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}

    _CheckProbe action=query

    {% set home_x, home_y, home_z = 'X' in params, 'Y' in params, 'Z' in params %}

    {% if not home_x and not home_y and not home_z %}
        {% set home_x, home_y, home_z = True, True, True %}
    {% endif %}

    _entry_point function=homing_override

    {% if home_z %}
        {% if 'z' in printer.toolhead.homed_axes %}
            {% if printer.toolhead.position.z < safe_z %}
                { action_respond_info("Z too low, performing ZHOP") }
                G0 Z{safe_z} F{z_drop_feedrate}
            {% endif %}
        {% else %}
            { action_respond_info("Z not homed, forcing full G28") }
            SET_KINEMATIC_POSITION X=0 Y=0 Z=0
            G0 Z{safe_z} F{z_drop_feedrate}
            {% set home_x, home_y, home_z = True, True, True %}
        {% endif %}
    {% endif %}

    {% if home_y %}
        G28 Y0
    {% endif %}

    {% if home_x %}
        G28 X0
    {% endif %}

    {% if home_z %}
        Dock_Probe
        _Home_Z
    {% endif %}

    _CheckProbe action=query
    _exit_point function=homing_override


# Home Z Routine
[gcode_macro _Home_Z]
gcode:
    {% set z_endstop_x = printer['configfile'].config["z_calibration"].nozzle_xy_position.split(",")[0]|float %}
    {% set z_endstop_y = printer['configfile'].config["z_calibration"].nozzle_xy_position.split(",")[1]|float %}
    {% set safe_z = printer["gcode_macro _User_Variables"].safe_z|float %}
    {% set travel_feedrate = printer["gcode_macro _User_Variables"].travel_speed * 60 %}
    {% set z_drop_feedrate = printer["gcode_macro _User_Variables"].z_drop_speed * 60 %}

    _entry_point function=Home_Z

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }
    {% else %}
        {% if not 'z' in printer.toolhead.homed_axes %}
            { action_respond_info("Resetting Z position to zero") }
            SET_KINEMATIC_POSITION Z=0
        {% endif %}

        # Move tool to safe homing position and home Z axis
        # location of z endstop
        G0 Y{z_endstop_y - 10} F{travel_feedrate}
        G0 X{z_endstop_x}      F{travel_feedrate}
        G0 Y{z_endstop_y}      F{travel_feedrate}
        G28 Z0
        G0 Z{safe_z} F{z_drop_feedrate}
        G0 Y{z_endstop_y - 10} F{travel_feedrate}
    {% endif %}

    _exit_point function=Home_Z

# Check to see if probe is where it is supposed to be after
# attaching/docking maneuver and set homing error or shutdown
[gcode_macro _CheckProbe]
variable_probe_state: 0
gcode:
    Query_Probe
    _SetProbeState action={ params.ACTION }

# Due to how templates are evaluated, we have query endstops in one
# macro and call another macro to make decisions based on the result
[gcode_macro _SetProbeState]
gcode:
    {% set query_probe_triggered = printer.probe.last_query %}
    {% set action  = params.ACTION|default('') %}

    SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_attached VALUE={ not query_probe_triggered }

    {% if action == 'query' %}
          SET_GCODE_VARIABLE MACRO=_Probe_Variables VARIABLE=probe_state VALUE={ query_probe_triggered }
    {% endif %}

    # If not docked
    {% if not query_probe_triggered and action == 'dock' %}
        { action_raise_error("Probe dock failed!") }
    {% endif %}

    # If not attached
    {% if query_probe_triggered and action == 'attach' %}
        { action_raise_error("Probe attach failed!") }
    {% endif %}


[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: _QUAD_GANTRY_LEVEL
description: Conform a moving, twistable gantry to the shape of a stationary bed with klicky automount
gcode:
    { action_respond_info("QG Level") }
    _CheckProbe action=query
	G90
    Attach_Probe
    _QUAD_GANTRY_LEVEL RETRIES=0 SAMPLES=1 horizontal_move_z=7
    _QUAD_GANTRY_LEVEL RETRIES=0 SAMPLES=2 horizontal_move_z=3.5
    _QUAD_GANTRY_LEVEL
    Dock_Probe

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
description: Perform Mesh Bed Leveling with klicky automount
gcode:
    { action_respond_info("Bed Mesh Calibrate") }
    _CheckProbe action=query
	G90
    Attach_Probe
    _BED_MESH_CALIBRATE
    Dock_Probe